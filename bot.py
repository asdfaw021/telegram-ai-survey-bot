import asyncio
import os
import requests
import re
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

load_dotenv()

BOT_API_TOKEN = os.getenv("BOT_API_KEY")
YANDEX_API_TOKEN = os.getenv("YANDEX_API_TOKEN")
YANDEX_CATALOG_ID = os.getenv("YANDEX_CATALOG_ID")

model_uri = f"gpt://{YANDEX_CATALOG_ID}/yandexgpt-lite"
yandex_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Api-Key {YANDEX_API_TOKEN}"
}

bot = Bot(token=BOT_API_TOKEN)
dp = Dispatcher()


def generate_poll_content():
    prompt = {
        "modelUri": model_uri,
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": 2000
        },
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤."
                        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: \n–í–æ–ø—Ä–æ—Å: [–≤–æ–ø—Ä–æ—Å]\n1. [–≤–∞—Ä–∏–∞–Ω—Ç1]\n2. [–≤–∞—Ä–∏–∞–Ω—Ç2]\n3. [–≤–∞—Ä–∏–∞–Ω—Ç3]\n4. [–≤–∞—Ä–∏–∞–Ω—Ç4]"
            },
            {
                "role": "user",
                "text": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –∏ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞ –≤ —Ç–≥."
            }
        ]
    }
    response = requests.post(yandex_url, headers=HEADERS, json=prompt)
    response.raise_for_status()
    result = response.json()
    return result['result']['alternatives'][0]['message']['text']


def parse_poll_content(text):
    try:
        lines = text.strip().split('\n')
        question_match = re.match(r'–í–æ–ø—Ä–æ—Å:\s*(.+)', lines[0])
        if not question_match:
            raise ValueError("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ YandexGPT")
        question = question_match.group(1)

        options = []
        for line in lines[1:]:
            option_match = re.match(r'\d+\.\s*(.+)', line)
            if option_match:
                options.append(option_match.group(1))

        if len(options) < 2:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2)")
        return question, options
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ YandexGPT: {e}")


@dp.message(Command("yapoll"))
async def send_yandex_poll(message: types.Message):
    try:
        poll_text = generate_poll_content()
        question, options = parse_poll_content(poll_text)
        await bot.send_poll(
            chat_id=message.chat.id,
            question=question,
            options=options[:10],
            is_anonymous=True,
            type="regular"
        )
    except Exception as e:
        await message.reply(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}")


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –æ–ø—Ä–æ—Å—ã!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ /yapoll –¥–ª—è –æ–ø—Ä–æ—Å–∞!")


@dp.message(Command("dice"))
async def send_dice(message: types.Message):
    await message.reply_dice(emoji="üé≤")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
